{
  "hash": "788d3a9e5ecc33d06b9733f76f95d587",
  "result": {
    "markdown": "---\ntitle: \"Getting Started with Quarto\"\ndate: \"2023-04-28\"\ncategories: [quarto, basic tutorial, jupyter]\nimage: \"starting.jpg\"\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n  pdf: \n    toc: true\n    number-sections: true\nnotebook-view:\n  - notebook: penguins.ipynb\n    title: \"Plots and Computations\"\nbibliography: references.bib\nreference-location: margin\n# csl: nature.csl\n---\n\nIn this document we will introduce a number of the key features Quarto markdown files support. We will be following the [basic tutorial](https://quarto.org/docs/get-started/computations/vscode.html) from Quarto as well as summarising some of the more advanced features introduced in their comprehensive guide. [^6]\n\n\n[^6]: Blog photo by [Setyaki Irham](https://unsplash.com/@setyaki?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) from [Unsplash](https://unsplash.com/photos/tfdff8Poebw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n  \n## What is Quarto?\nQuarto allows you to easily share and publish your code/analysis/research through any of markdown/`jupyter`/`knitr`. It is an extension of pandoc and offers support for `python`/`R`/`Julia`. \n\n### Best features\n- render `jupyter` notebooks\n- render markdown with code\n- advanced visual customisation - figures, layout, citations\n- create simple and easily customisable websites\n- Great integration with [VSCode](https://code.visualstudio.com/) and [Github Pages](https://pages.github.com/).\n\n## Why use quarto?\nSharing jupyter notebooks is tedious. Either you share a link to a prerendered notebook on github or you awkwardly convert to html/pdf with a variety of tools. \n\n*The problem?* The conversion of a notebook is awkward. Often you have to choose between removing all or including all the code. And while the markdown support within `jupyt`er is good  again the customisation is limited. \n\nQuarto solves this. It is a rendering tool that gives you a number of options with customise how code, figures and text are arranged when converting to `html` and `pdf`.\n\nEven better it provides a new markdown format `.qmd` that allows you to write `python` code within a markdown document (similar to `R markdown`) or link to figures within a precomputed `jupyter` notebook. \n\n# writing Code\n\n## NumPy\nCreate code blocks in markdown using ` ```{python} `\n```` markdown\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n```\n:::\n:::\n\n\n````\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\na = np.arange(15).reshape(3, 5)\na\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n```\n:::\n:::\n\n\n## Matplotlib\nControl how figures appear with comments `#| keyword: value`. [^:7]\n\n[^7]: The [getting started tutorial](https://quarto.org/docs/get-started/computations/vscode.html) has a nice description of the main options for figures and code output \n\n```` markdown\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n```\n\n::: {.cell-output .cell-output-display}\n![Errorbar limit selector](start-with-quarto_files/figure-pdf/fig-limits-output-1.pdf){#fig-limits fig-pos='H'}\n:::\n:::\n\n\n````\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)\n```\n\n::: {.cell-output .cell-output-display}\n![Errorbar limit selector](start-with-quarto_files/figure-pdf/fig-limits-eg-output-1.pdf){#fig-limits-eg fig-pos='H'}\n:::\n:::\n\n\n## Plotly\n\n### without options\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n### With Options\n\n::: {#fig-gapminder .cell .column-page layout-ncol='2' execution_count=6}\n``` {.python .cell-code}\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n\ngapminder1957 = gapminder.query(\"year == 1957\")\nfig = px.scatter(gapminder1957, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n```\n\n::: {#fig-gapminder-1 .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nGapminder: 1957\n:::\n\n::: {#fig-gapminder-2 .cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nGapminder: 2007\n:::\n\nLife Expectancy and GDP\n:::\n\n\n## From Notebooks\nIt is simple to embed plots from precomputed notebooks and include a link.\n\n```\n{{< embed penguins.ipynb#fig-bill-scatter >}}\n```\n<!-- 12A0366C|/mnt/c/Users/adonm/phd/amarnane.github.io/posts/starting-with-quarto/start-with-quarto.ipynb|:penguins.ipynb#fig-bill-scatter |  | echo:false,warning:false,asis:true,eval:false -->\n```\n{{< embed penguins.ipynb#fig-bill-marginal >}}\n```\n<!-- 12A0366C|/mnt/c/Users/adonm/phd/amarnane.github.io/posts/starting-with-quarto/start-with-quarto.ipynb|:penguins.ipynb#fig-bill-marginal |  | echo:false,warning:false,asis:true,eval:false -->\nYou can also include the code by specifying `echo=true` in the call.\n```\n{{< embed penguins.ipynb#species-counts echo=true >}}\n```\n<!-- 12A0366C|/mnt/c/Users/adonm/phd/amarnane.github.io/posts/starting-with-quarto/start-with-quarto.ipynb|:penguins.ipynb#species-counts |  | echo:true,warning:false,asis:true,eval:false -->\n\nYou can control how the link to the notebook appears in the title metadata [^4]\n```\nnotebook-view:\n  - notebook: penguins.ipynb\n    title: \"Plots and Computations\"\n```\n\n[^4]: See the [notebook embedding tutorial](https://quarto.org/docs/authoring/notebook-embed.html) for more info\n\n\n## rendering code\nThere are a number of ways to control the rendering of code. For example, if you have a notebook with some code that takes a long time to run you won't want to recompute it everytime you change formatting. There are many options to control this behaviour. [^2] \n\n```\nexecute:\n  freeze: true \n```\n\n[^2]: see the [python tutorial](https://quarto.org/docs/computations/python.html) for a more in depth explanation\n\n# Formatting \n## callout blocks\nQuarto has nice control for adding note blocks. There are five formats [^5]\n- note\n- warning\n- important\n- tip \n- caution\n\n[^5]: See [their tutorial](https://quarto.org/docs/authoring/callouts.html) for a more in depth explanation\n\n\n```\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip with Title\n\nThis is an example of a callout with a title. See [their tutorial](https://quarto.org/docs/authoring/callouts.html) for a more in depth explanation\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n```\n::: {.callout-note}\nNote that there are five types of callouts, including:\n`note`, `warning`, `important`, `tip`, and `caution`.\n:::\n\n::: {.callout-tip}\n## Tip with Title\n\nThis is an example of a callout with a title. \n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n\n\n## Cross referencing\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.plot([1,23,2,4])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot ](start-with-quarto_files/figure-pdf/fig-line-plot-output-1.pdf){#fig-line-plot fig-pos='H'}\n:::\n:::\n\n\nThis is a cross reference to our figure @fig-line-plot with `@fig-line-plot`. We can also reference the matplotlib figure above @fig-limits-eg `@fig-limits-eg`. \n\n:::{.callout-note}\nYou must start your label with `fig-` e.g. `fig-line-plot` for the cross reference to work.\n:::\n\n## Citations\nYou can include citations by including a bibliography. \n\nFor example, Antoine et al produced some sick work [@alain-2022].\n\nAdd a path to your bibliography in the title metadata\n```\n\n---\ntitle: \"My Document\"\nbibliography: references.bib\n---\n\n```\n\nYou can customise citation style and more.[^1]\n```\n\n---\ntitle: \"My Document\"\nbibliography: references.bib\ncsl: nature.csl\n---\n\n``` \n:::{.callout-note}\nYou can download csl files from the [CSL repo](https://github.com/citation-style-language/styles). nature.csl was taken from [here](https://github.com/citation-style-language/styles/blob/master/nature.csl) (there are so many I had to search to get it.)\n:::\n\n[^1]: Footnotes are also possible. For more guidance see the [quarto tutorial](https://quarto.org/docs/authoring/footnotes-and-citations.html)\n\nCitation can also be placed in the margin by adding\n```\ncitation-location: margin\n```\n\n## Equations\nWe can also write equations. \n\nThey can be placed inline $\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$ `$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$`.\n\nThey can be placed centrally.\n```\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n```\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n\n\nBut they can also be placed in the margin\n```\n::: {.column-margin}\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n\n:::\n```\n::: {.column-margin}\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n\n:::\n\n",
    "supporting": [
      "start-with-quarto_files/figure-pdf"
    ],
    "filters": []
  }
}