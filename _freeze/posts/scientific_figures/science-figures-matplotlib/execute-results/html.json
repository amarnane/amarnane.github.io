{
  "hash": "736e4fdd9b4b6112dd763315d3ef27b9",
  "result": {
    "markdown": "---\ntitle: \"Scientific Figures - with matplotlib\"\nsubtitle: |\n  Plotting in python is great but it can be hard to get started with matplotlib. Getting an ugly figure is easy, getting a good figure is hard. This might make it easier\nauthor: \"Aidan Marnane\"\ndate: \"2023-04-27\"\ncategories: [matplotlib, seaborn, python, science, phd]\n---\n\n# Scientific Figures with Matplotlib\n\nDefault matplotlib is awful. It is hard to learn. There is a lot going on. It is not clear. And the [matplotlib tutorial](https://matplotlib.org/stable/tutorials/introductory/quick_start.html#sphx-glr-tutorials-introductory-quick-start-py) is awful (crazily it used to be worse). **But** the package is very good (*once you get used to it*). The customisation is amazing and it is so helpful when you want to make a specfic plot for your paper/thesis/poster.\n\n:::{.callout-tip title=\"Just a slight aside\"}\nAny tutorial that starts by telling you *\"everything on the figure is an artist\"* has no idea how people learn (what is an artist? Do I need to teach it to paint? will it work on its own?)\n:::\n\n# Importing Matplotlib\nTo import `matplotlib` you don't import `matplotlib` because that would be obvious.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nThis downloads all the functions required to make most plots. Matplotlib contains a lot of other functions/classes used to actually do the drawing/making the image. They aren't necessary for 99\\% of the figures you'll make. You might also see people use `matplotlib.pylab`. This combines `pyplot` with `numpy` functions and is very MATLAB like. It is essentially deprecated and is not recommended at all.\n\n\n## Several ways of making a plot\nFirst create some data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0,2,100)\ny1 = x**2\ny2 = x**3\n```\n:::\n\n\n:::{layout-ncol=2}\nPyplot-style \n\nObject Oriented or subplot style\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nplt.figure(figsize=(4,3))\nplt.plot(x, y1, label='quadratic')\nplt.plot(x, y2, label='cubic')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\nplt.savefig('pyplotxy.png')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-4-output-1.png){width=353 height=282}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfig, ax = plt.subplots(figsize=(4,3))\nax.plot(x, y1, label='quadratic')\nax.plot(x, y2, label='cubic')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.legend()\nfig.savefig('subplotsxy.png')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-5-output-1.png){width=353 height=282}\n:::\n:::\n\n\n:::\n\n:::{.callout-important}\nIGNORE PYPLOT STYLE IT IS AWFUL AND CONFUSING\n:::\n\nWhile it is easy to get started with, eventually it only leads to headaches. Firstly, all the commands are slightly different so if someone has written code subplot style it is hard to change it to plt style. Secondly nearly everyone on stack overflow uses subplot style. My advice: start with subplot style and just slowly learn how to change things. \n\n## Figure vs Axes\nI always found this confusing when I was learning. And I don't think it is very intuitive (especially the `plt.Figure`). \n\n:::{.column-margin}\n![](canvas.jpg)[^1]:\n:::\n\n[^1]: Photo by [Justyn Warner](https://unsplash.com/@justynwarner?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/VH8w75u3LE0?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nEssentially the Figure is your canvas. It is the image you will download. It controls the size, the resolution and the layout of the image you create. \n\nAn axis is an individual plot. You can have many Axes in a Figure but each axis will have one xlabel, one ylabel, one legend etc. All the elements that make up a plot (a chart?) can be adjusted and set on an individual axis.\n\nRemember each Axis on a Figure can be adjusted individually but the quality of your image will depend on the settings of your Figure.\n\n## plt.subplots\nAfter much messing about and trying different ways of creating matplotlib figures I have decided this is the only way. When you make a matplotlib figure start it with this line\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfig, ax = plt.subplots()\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-6-output-1.png){width=581 height=416}\n:::\n:::\n\n\nThere are many settings you can change in plt.subplots\n\n- number of rows/columns - how many axes you want\n- dpi - number of dots per inch (resolution of image)\n- figsize - `(width, height)` in inches (increase if you need space)\n- sharex/sharey - common x axis or y axis for the plots\n\nMain benefit is creating a grid of axis so you can have multiple plots in the same image.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig, axes = plt.subplots(2,2)\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-7-output-1.png){width=581 height=416}\n:::\n:::\n\n\nIt creates a list of Axis instances (`axes`). To access a specific axis simply use the correct index (same as a python `list`). \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# access top left corner\nax = axes[0,0]\nax.plot(x,y1)\n\n# plot in top right corner\nax = axes[0,1]\nax.plot(x,y2)\n```\n:::\n\n\n:::{.callout-note}\nIf you only have a row or column there is only one dimension (index). So `axes[0]` will be the first row/column `axes[1]` the second etc.\n```python\nfig, axes = plt.subplots(1,2)\nax = axes[0]\nax = axes[1]\n```\nYou can get a flattened list of axes using `axes.flatten()`.\n:::\n\n## Create functions\nMaking good figures is hard so if you spend the time to make a function to plot some data that you will need again in the future make the code into a function. Even better add it to a `.py` file so you can import it in the future.\n\nJust remember you save and show the figure. You manipulate the data with an axis. I don't fully understand how this works in terms of memory but the way I approach plotting functions is to add a parameter to accept an axis and to create a new figure if an axis isn't passed. For example\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef myplot(x,y,ax=None, **kwargs):\n\t# create a figure if not given an axis\n\tif ax is None:\n\t\tfig, ax  = plt.subplots()\n\telse:\n\t\tfig = None # stop not defined error when returning\n\t# plot xy\n\tax.plot(x,y, **kwargs)\n\t\n\treturn fig, ax # if ax is passed as a param then fig will be None\n\nfig, ax = myplot(x, y1, color='C2') # note you can use C0, C1, C2 to cycle through the default colors in matplotlib.\n\nax.plot(x, y2)\nfig.suptitle('Function Plot')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-9-output-1.png){width=558 height=459}\n:::\n:::\n\n\n:::{.callout-note}\nNote: `**kwargs` means keyword arguments. `**` is a special operator in python that unpacks dictionaries. It means you don't have to constantly rewrite many optional parameters. It also collects extra keyword arguments. For example, I might want to change the linestyle and alpha of my plot. I can  call my function `myplot(x,y, linestyle='-', alpha=0.5)` and they will get passed to `ax.plot` within `myplotf`.\n\nYou might also see `*args`. `*` unpacks lists. So `x,y` is an unpacked list and might be specified in the functions definition as `def myfunc(*args, **kwargs):` (which isn't very informative but happens more often than you would think.)\n:::\n\n## change dpi not figsize\nA common problem when looking to save or use your figures in publications is that your figure is not big enough/sharp enough/the date is hard to make out. The first argument people typically use to adjust the size of the figure is `figsize`. This does make the figure bigger but it does not make the figure sharper.\n\n::: {layout-ncol=2}\n### `figsize`\n- Sets the size of the figure (width, height) in inches.​\n- Problem: Breaks ratio between linewidth, whitespace and fontsize\n\n### `dpi` - Dots per Inch\n- Increases the resolution by adding dots.​\n- Keeps ratio between linewidth, whitespace and fontsize\n::: \n\n::: {.cell .column-page layout-nrow='2' execution_count=9}\n``` {.python .cell-code}\ndef plot(fs,dpi):\n    fig, ax=plt.subplots(figsize=fs, dpi=dpi)\n    ax.set_title(\"Figsize: {}, dpi: {}\".format(fs,dpi))\n    ax.plot([2,4,1,5], label=\"Label\")\n    ax.legend()\n    plt.show()\n\nfigsize=(2,2)\nfor i in [36, 108, 324]:\n    plot(figsize, i)\n\ndpi=72\nfor i in [2,4,6]:\n    plot((i,i), dpi)\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-10-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-10-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-10-output-3.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-10-output-4.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-10-output-5.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-10-output-6.png){}\n:::\n:::\n\n\n# seaborn\n\nGood visualisation that is easy. This package is great for getting a nice figure quickly. They recently updated the [tutorial](https://seaborn.pydata.org/tutorial/introduction.html)and it is far more intuitive now. \n\n:::{layout-ncol=2}\n### Pros\n- nice figures quickly\n- easy to learn\n- integrates really nicely with pandas\n- can change theme and context (switch to poster or paper sized) with one line of code.\n\n### Cons\n- customising figures can be tricky \n- yet another way of manipulating matplotlib figures with [figure level functions](https://seaborn.pydata.org/tutorial/function_overview.html)\n- getting pandas dataframe into the [right format](https://seaborn.pydata.org/tutorial/data_structure.html) can be tricky. (pd.melt will be your friend)\n:::\n\nCreating a good figure is incredibly simple and the equivalent figure in matplotlib would take about 10 times the amount of code. This example from their tutorial summarises it nicely.\n\n::: {.cell .column-page execution_count=10}\n``` {.python .cell-code}\n# Import seaborn\nimport seaborn as sns\n\n# Apply the default theme\nsns.set_theme()\n\n# Load an example dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](science-figures-matplotlib_files/figure-html/cell-11-output-1.png){width=1031 height=466}\n:::\n:::\n\n\nI personally prefer to use axes level functions (e.g. `scatterplot`, `histplot`) so I can customise the figure options but starting off the figure level functions (e.g. `relplot`,  `displot`) are incredible.\n\n## Styles & Context\nEven if you don't use the seaborn plotting functions setting the theme and context are great for improving the aestethics. The set context is particularly useful for posters.\n\n- [Themes](https://seaborn.pydata.org/generated/seaborn.set_style.html#seaborn.set_style)\n- [Context](https://seaborn.pydata.org/generated/seaborn.set_context.html#seaborn.set_context)\n\nThis `seaborn` [tutorial](https://seaborn.pydata.org/tutorial/aesthetics.html) is great and shows how you can even choose different themes for different subplot axes.\n\n`matplotlib` has it's own set of themes available. To set the theme for matplotlib it is very similar to seaborn.\n\n::: {.cell .column-page .caption-undefined layout-ncol='2' execution_count=11}\n``` {.python .cell-code code-fold=\"true\"}\ndef plot_style_example():\n    fig, ax = plt.subplots()\n    ax.plot(x, x, label='linear')  # Plot some data on the axes.\n    ax.plot(x, y1, label='quadratic')  # Plot more data on the axes...\n    ax.plot(x, y2, label='cubic')  # ... and some more.\n    ax.set_xlabel('x label')  # Add an x-label to the axes.\n    ax.set_ylabel('y label')  # Add a y-label to the axes.\n    ax.set_title(\"Simple Plot\")  # Add a title to the axes.\n    ax.legend()\n    plt.show() \n\nplt.style.use('default')\n# plot as normal\nplot_style_example()\n\nplt.style.use('tableau-colorblind10')\n# plot as normal\nplot_style_example()\n\nplt.style.use('default')\nplt.style.use('ggplot')\n# plot as normal\nplot_style_example()\n\nplt.style.use('default') # reset style after changing it. Not all style adjust same \nplt.style.use('fivethirtyeight')\n# plot as normal\nplot_style_example()\n```\n\n::: {.cell-output .cell-output-display}\n![default](science-figures-matplotlib_files/figure-html/cell-12-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![tableau-colorblind10](science-figures-matplotlib_files/figure-html/cell-12-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![ggplot](science-figures-matplotlib_files/figure-html/cell-12-output-3.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![fivethirtyeight](science-figures-matplotlib_files/figure-html/cell-12-output-4.png){}\n:::\n\nMatplotlib Themes\n:::\n\n\nTo see a list of the theme's available \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nplt.style.available\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['Solarize_Light2',\n '_classic_test_patch',\n '_mpl-gallery',\n '_mpl-gallery-nogrid',\n 'bmh',\n 'classic',\n 'dark_background',\n 'fast',\n 'fivethirtyeight',\n 'ggplot',\n 'grayscale',\n 'seaborn-v0_8',\n 'seaborn-v0_8-bright',\n 'seaborn-v0_8-colorblind',\n 'seaborn-v0_8-dark',\n 'seaborn-v0_8-dark-palette',\n 'seaborn-v0_8-darkgrid',\n 'seaborn-v0_8-deep',\n 'seaborn-v0_8-muted',\n 'seaborn-v0_8-notebook',\n 'seaborn-v0_8-paper',\n 'seaborn-v0_8-pastel',\n 'seaborn-v0_8-poster',\n 'seaborn-v0_8-talk',\n 'seaborn-v0_8-ticks',\n 'seaborn-v0_8-white',\n 'seaborn-v0_8-whitegrid',\n 'tableau-colorblind10']\n```\n:::\n:::\n\n\n:::{.callout-note}\nDifferent theme's change different settings. Use `plt.style.use('default')` to reset before changing to a new theme.\n:::\n\nPersonally I think `sns.set_context` is great for switching between paper and poster images. The increase in line width and reduction of white space is great on a poster and is so simple to switch between the two. Note: The themes available in matplotlib contain `seaborn poster` and `seaborn paper` styles. These themes do not quite replicate the behaviour of `sns.set_context` and if you have a choice between the two use `sns.set_context('poster')` over `plt.style.use('seaborn-v0_8-poster')`. \n\n::: {.cell .column-page .caption-undefined layout-ncol='3' execution_count=13}\n``` {.python .cell-code code-fold=\"true\"}\nplt.style.use('default')\nsns.set_context('paper')\n# plot as normal\nplot_style_example()\n\nplt.style.use('default')\nsns.set_context('talk')\n# plot as normal\nplot_style_example()\n\nplt.style.use('default')\nsns.set_context('poster')\n# plot as normal\nplot_style_example()\n```\n\n::: {.cell-output .cell-output-display}\n![paper](science-figures-matplotlib_files/figure-html/cell-14-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![talk](science-figures-matplotlib_files/figure-html/cell-14-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![poster](science-figures-matplotlib_files/figure-html/cell-14-output-3.png){}\n:::\n\nSeaborn Set Context\n:::\n\n\n## ggplot esque\nThey have an experimental interface that is recently added `seaborn.objects`. They have a nice run through [here](https://seaborn.pydata.org/tutorial/objects_interface.html). Basic idea is you specify the data with a plot object and then add options such as type of plot (line/scatter/barchart) and data trasformations (aggregate/normalise).\n\nLooks cool and intuitive but is in development and again will be tricky to customise.\n\n",
    "supporting": [
      "science-figures-matplotlib_files"
    ],
    "filters": [],
    "includes": {}
  }
}