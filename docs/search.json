[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Aidan Marnane",
    "section": "",
    "text": "I am a PhD student in the Data Science CDT at the University of Edinburgh. My research is focused on the use of similarity networks and unsupervised clustering for biomedical data. Running, bouldering and board games keep me sane when not banging my head against the monitor!\n\n\nPhD. Candidate in Centre for Doctoral Training in Data Scienc | University of Edinburgh, 2019 - Present\nMSc(R). in Data Science | University of Edinburgh, 2018-2019\nBSc. in Mathematical Sciences | University College Cork, 2014-2018\n\n\n\nCINNTE QQI Student Reviewer | QQI CINNTE review of Trinity College Dublin, Spring 2022\nAMGEN Scholar Research Intern | ETH Zurich, Summer 2017\nResearch Intern | Tyndall National Institute, Summer 2016"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Aidan Marnane",
    "section": "",
    "text": "I am a PhD student in the Data Science CDT at the University of Edinburgh. My research is on unsupervised clustering of biomedical data through the construction of similarity networks. I am specifically interested in applying these methods to Autism Spectrum Disorder in the hopes of discovering meaningful subtypes that can improve supports, care and understanding of ASD. I am also interested in improving the construction of similarity networks and identifying methods of reducing the noise in unsupervised clustering on networks. This work is supervised by Ian Simpson and funded in part by the EPSRC. My other research interests include graph learning, incorporation of ontology information and the wider area of network science."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a PhD student in the Data Science CDT at the University of Edinburgh. My research is focused on the use of similarity networks and unsupervised clustering for biomedical data. Running, bouldering and board games keep me sane when not banging my head against the monitor!"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nPhD. Candidate in Centre for Doctoral Training in Data Scienc | University of Edinburgh, 2019 - Present\nMSc(R). in Data Science | University of Edinburgh, 2018-2019\nBSc. in Mathematical Sciences | University College Cork, 2014-2018"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\nCINNTE QQI Student Reviewer | QQI CINNTE review of Trinity College Dublin, Spring 2022\nAMGEN Scholar Research Intern | ETH Zurich, Summer 2017\nResearch Intern | Tyndall National Institute, Summer 2016"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Aidan Marnane",
    "section": "",
    "text": "PhD. Candidate in Centre for Doctoral Training in Data Scienc | University of Edinburgh, 2019 - Present\nMSc(R). in Data Science | University of Edinburgh, 2018-2019\nBSc. in Mathematical Sciences | University College Cork, 2014-2018"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Aidan Marnane",
    "section": "",
    "text": "CINNTE QQI Student Reviewer | QQI CINNTE review of Trinity College Dublin, Spring 2022\nAMGEN Scholar Research Intern | ETH Zurich, Summer 2017\nResearch Intern | Tyndall National Institute, Summer 2016"
  },
  {
    "objectID": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html",
    "href": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html",
    "title": "Nohup & Tmux - Background Terminal Processes",
    "section": "",
    "text": "If you have a piece of code that takes a long time to complete e.g. a neural network that needs a day to train, a script that needs to download a million papers, a web scraper that needs to wait 10 seconds before recontacting a server (repeated 300,000 times) you will find you working remotely a bit frustrating. When you close your laptop it can disconnect. Or your internet at home is awful. Either way you send your script running overnight and come back in the morning to find the terminal disconnect and cancelled your script. All that time wasted because the connection between you and the server disconnected.\nWhat we want is to let our scripts/code run and the code to persist even if our terminal session ends. Luckily there are tools in linux that allow us to do this. There are three that I know of - nohup - screen - tmux\nPreviously I have only used nohup. In some ways it is the simplest method. But today I am going to try to use some mild propaganda to convert you to tmux."
  },
  {
    "objectID": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html#getting-started",
    "href": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html#getting-started",
    "title": "Nohup & Tmux - Background Terminal Processes",
    "section": "getting started",
    "text": "getting started\nnohup is a command that tells your script to ignore the hang up signal that occurs when a terminal window is closed (in our case when our laptop disconnects from the server). It stands for “no hang up”. In practice, it is very simple to run. You simply add nohup in front of your normal script/command e.g.\nnohup python trainmymodel.py\nnohup ./mybashscript.sh\nWhen you do that you will find the process runs even if you disconnect or close the terminal. You can still cancel the command with keyboard interrupt (ctrl+c).\n\nscript output\nIf you run nohup you will find the output of any script e.g. print('hello world') will not appear. This is because all standard output is redirected to nohup.out, a file that is created when you run the command nohup. This is so you can still see the output of a script after you disconnect. You can change the name/specify the output file by using the “redirect” operator &gt; (second answer is clearer).\nnohup python trainmymodel.py &gt; output.log\nThis will send all output from our script into output.log.\n\nstandard error\nThe above script works great but you will find if any errors occur they will not appear. This is because the terminal has two separate ways of outputting 1. stdout - standard output (normal output from scripts or commands) 2. stderr - standard error (output caused by any errors). In your terminal both of these appear the same and show up identically but you actually have to access them separately.\n\nNote: this is system has a number of benefits for admins or server hosts or people doing more complicated computer things. They can check just for errors rather than dealing with all output. Typically a PhD student won’t need to deal with this.\n\nTo get the standard error to output to our output file we use\nnohup python trainmymodel.py &gt; output.log 2&gt;&1\n2&gt;&1 tells standard error (output channel 2) to output instead through channel 1 (standard output). If we wanted the error to go to a separate file we could use\nnohup python trainmymodel.py &gt; output.log 2&gt;error.log\nA more detailed and more comprehensive explanation of the many ways you can manipulate linux output is available here.\n\n\nappend rather than overwrite\nThe last thing I should tell you is that we can append output to an existing log using &gt;&gt;. Here we use &gt; output.log which overwrites our output. If instead we wanted to keep the previous log we can use &gt;&gt;\nnohup python trainmymodel.py &gt;&gt; output.log 2&gt;&1\nHere we append output all output to the existing output.log file rather than overwriting.\n\nNote: 2&gt;&1 doesn’t change. This is because we are still redirecting stderr through stdout and when we do this we are note creating or overwriting output files.\n\n\n\n\nrunning in background\nWhile running with nohup means our script will not be cancelled when we disconnect, it does mean our terminal window cannot be used for other tasks and there is still the danger we accidentally cancel our script with keyboard interrupt (ctrl+c). To ensure our script does not get interrupted we can run our code in the background using &\nnohup python trainmymodel.py &gt; output.log  2&gt;&1 & \nNow our script cannot be interrupted through disconnect or through keyboard interrupt. A more detailed explanation of the different ways processes in the terminal can be interrupted is available in this very informative stack overflow post.\n\n\nkilling process\nOf course the next question is how do we stop our background process. Using keyboard interrupt or disconnecting won’t work anymore so we need to kill the process directly. To do this we have two steps. 1. find the process id (pid) 2. kill the process manually\nTo find current active process we can use\nps aux \nThis lists all process associated with the current user (i.e. your processes). We can search for a particular process using grep.\nps aux | grep \"insertnameofscripthere\"\nSo we could use\nps aux | grep \"trainmymodel\"\nto find the pid that would occur if we used one of the example commands above.\nOnce we have the pid we can end the process using the kill command\nkill -9 putpidnumberhere\ne.g. kill -9 1234\n\nAutomatically finding process id\nWe can automatically find the process id and store it. You might notice that immediately after we run the command a pid appears. We can display that pid using\necho $! \n$! displays the last process executed (note this pid might not show up if & is not used. I don’t fully understand the command) We can store the pid in a file using\necho $! &gt; save_pid.txt\nWe can then kill the process\nkill -9 `cat save_pid.txt`\nThis command is a two step process; first cat prints the contents of save_pid.txt i.e. our pid, then we kill the process."
  },
  {
    "objectID": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html#tmux-commands",
    "href": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html#tmux-commands",
    "title": "Nohup & Tmux - Background Terminal Processes",
    "section": "tmux commands",
    "text": "tmux commands\nThis is a mixture of cheat sheet and guide of how to start tmux. I recommend this guide and this cheatsheet for a more in depth walkthrough of tmux. I think the official getting started guide is also great. They have some nice images explaining the terminal and go into much better depth of all of tmux’s features than I have (there is advanced copy paste tools I haven’t explored).\n\ninstall on ubuntu\nsudo apt-get update # first refresh package list\nsudo apt-get install tmux # then install tmux\nSee tmux guide for installation on other distributions/OS.\n\n\nCreate and manage sessions\ncreate new session\ntmux \nexit\nctrl+d\nlist active session\ntmux ls\nkill session by name -t means target\ntmux kill-ses -t 1\ncreate new named session\ntmux new -s mysession\ndetach from session\nctrl+b d\nlist all session\ntmux ls \nreattach to mysession\ntmux a -t mysession\nname session\nctrl+b $\n\n\nwindows\ncreate new window\nctrl+b c\nrename window\nctrl+b , \nmove to next window\nctrl+b n\nmove to previous window\nctrl+b p\nkill window\nctrl+b &\n\n\npanes\nhorizontal split on current window\nctrl+b %\nswap panes\nctrl+b o\nmove between panes using arrow keys\nctrl+b →\nctrl+b ←\nshow pane numbers\nctrl+b q\nkill pane\nctrl+b x\n\nNote: turning on mouse-mode is helpful especially when starting off. Use ctrl+b : to enter set-option mode then type set -g mouse on . See below for how to enable mouse-mode by default in the config."
  },
  {
    "objectID": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html#customising-tmux",
    "href": "posts/running-code-in-background/2023-03-28-run-scripts-in-background.html#customising-tmux",
    "title": "Nohup & Tmux - Background Terminal Processes",
    "section": "Customising tmux",
    "text": "Customising tmux\nThis is entirely optional so ignore it if you like. But I personally found editing the appearance and some of the commands very helpful for getting started with tmux.\nTo edit the tmux config and customise the visuals of tmux you add commands to ~/.tmux.conf. To edit the file in vscode simply type\ncode ~/.tmux.conf \nIf you make some changes e.g. turn on mouse mode by default (adding set -g mouse on to .tmux.conf) then you will need to refresh the tmux settings. One way is to close terminal and reconnect.\nAnother is\ntmux source-file ~/.tmux.conf\nthis is similar to refreshing bash setting by using source ~/.bashrc.\nBelow is the contents of my .tmux.conf . Most of it is aestethic but note: I change the command hotkey from ctrl+b to ctrl+a\nHere is the full list of the changes contained in the code below - mouse mode - turn on mouse mode so I can click between windows & panes - new hotkey - change command hotkey from ctrl+b to ctrl+a (only because I find easier to type with one hand) - enable colours - move status bar - from bottom to to top - window index - start counting windows from 1 rather than 0 - new colors - changed colours (from green) and added some different formatting (entirely personal preference)\nMy ~/.tmux.conf:\n# turn on colors\nset -g default-terminal \"xterm-256color\" # Setting the correct term\n\n# change tmux command binding to ctrl+a rather than ctrl+b\nset-option -g prefix C-a\nunbind-key C-b\nbind-key C-a send-prefix\n\n# turn on mouse mode\nset -g mouse on\n\n# change index to start from 1\nset -g base-index 1\n\n# Update the status line every second\nset -g status-interval 1\n\n# statusbar\n## position of bar and window lists\nset -g status-position top # [top | bottom]  status bar\nset -g status-justify left # [left | centre | right]  window lists\n## colours & format\nset -g status-style 'bg=blue fg=yellow'\nset -g status-left ''\nset -g status-right '#[fg=colour233,bg=cyan] %d/%m #[fg=colour233,bg=magenta] %H:%M:%S '\nset -g status-right-length 50\nset -g status-left-length 20\n# ^colour233 is a shade of grey that looked nice\n\n# set inactive window format and color\nset -g window-status-style 'fg=black, bg=brightblue'\nset -g window-status-format ' #I: #W #F'\n\n# set active window format and color\nsetw -g window-status-current-style 'fg=colour233, bg=yellow bold'\nset -g window-status-current-format ' #I: #W #F'\n# ^when setting format #F displays a * if in active window and - if not. \n#          #I is the index of the window, #W is the window name"
  },
  {
    "objectID": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html",
    "href": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html",
    "title": "Remote working with ssh & VSCode",
    "section": "",
    "text": "I really like working on a remote server. I find there are a number of benefits over coding locally that are worth taking the time to set it all up.\n\nWork wherever I want. Either on my desktop machine or on my laptop and I can always access the the same environment. I don’t have to worry if I installed something new on one machine or if I moved the correct data around. It all stays in the same place and I can access it as I need.\nRunning long programs. If something takes a couple of hours or days, you don’t need to worry about shutting down or moving your laptop. You especially don’t have to deal with lag or memory issues while you wait for it to finish (I am very impatient).\n\n\n\n1\nIn summary: more ram, more memory, more fun.\n\n\nThe main tool I use to work remotely is vscode. VSCode is an IDE developed by microsoft. It is lightweight, there are a lot of extensions that make coding nice and it has a great setup for remote work. I believe Pycharm has a similar setup and as students we can get a licence but honestly my main problem is it takes ages to open up and I am a true believer in making things as smooth as possible to start work (otherwise procrasination can take over).\n\n\nRunning vscode on a remote computer or server is very simple. There are 3 steps\n\ninstall remote server extension\nadd server details to .ssh/config. The simplest way is to\n\nctrl+shift+p Remote-SSH: Add New SSH Host\ntype ssh connection e.g. ssh username@server.address\nAn entry has now been made to your ssh config (will explain below)\n\nConnect to server using ctrl+shift+p Remote-SSH: Connect to Host\n\nAfter that you just open a folder/file and can code away with all code running remotely.\n\n\n\n\nSome tips I find helpful.\n\nBackup code: write code in github repos and commit regularly! It is so important to have a backup. If something goes wrong the code is gone forever! Plus if you don’t like changes you make you can revert to code you wrote 3 months ago.\nPasswordless ssh connections: Add your public key from your local computer to the accepted keys on the server. You won’t have to to type passwords again and again. Do same thing for git, add public key to accepted keys on github. 2\nCreate source code: I like doing analysis in jupyter notebooks but I often find they get cluttered, messy and it is tedious to look back through notebooks and access functions or scripts that I wrote. Good practice is to move functions/classes you use regularly to .py as source code and create scripts that accept command line arguments for specific analysis/tasks you will want to do regularly. 3\nMove data: Use rsync to move data from your computer to the server and vice versa.\n\nrsync -azP source destination\n\n-z flag compresses the data as it is copied so is very efficient.\n-a flag,which stands for archive, syncs recursively and allows to transfer folders. Is similar to -r flag but keeps permissions, timestamps, ownership and other things (more likely to stop things breaking).\n-P gives progress bar and resumes interrupted transfers.\n\nThe format is: rsync -azP local_path_2_folder username@server.address:path_on_remote_server e.g. rsync -azP ~/dir1 amarnane@myserver.inf.ed.ac.uk:~/docs/ (flip order to move from remote to local)\nThere are many more options that I haven’t explored yet but this a nice tutorial\n\nYou will not remember this [code/analysis/function]: Some general PhD advice but make sure to write out explanations in notebooks, comment regularly in your code and try to datestamp or include copy of the code used to generate any figures or models or data that you publish/use in a presentation/report. At some point you will drop what you are currently working on and will come back to it after a couple of months/years. You will not remember what exactly it was you did. Make it easier for yourself! 4\nNext step/Advanced/I have not done this:\n\nUse docker instances so that you can easily share your environment/model and have it run right away. It allows you to save a copy of your setup so people can just run your code e.g. run a model developed on linux in a windows machine.\nUse a workflow system like snakemake or nextflow to combine scripts and make and end to end pipline for your project. If you have multiple steps like preprocess data -&gt; create data stucture -&gt; train model -&gt; analyse output you can combine them easily using a workflow system and pass the output from one section to the other easily. It is more modular and adaptable than writing an end to end script (if your code is python only) and allows you to pass output from one language to a script using different software e.g. python train model, R analyse and plot. Can also add checkpoints to start the pipeline from any intermediate step e.g. change model and skip rerunning preprocessing.\n\n\n\n\n\nssh or Secure shell is a protocol used to access remote computers over a network. The link will describe it better than I can but the main thing to know is that it is a way to access other computers in a safe way. It is very secure and as a phd student the main thing to know is you can use it work remotely, create passwordless connections and passwordless git repos. If you ever want to use a cluster or connect to a remote server, ssh is the way to do it. On linux the connections are done through the terminal (or vscode as I described above). On windows, it used to be a bit trickier but you can now access it through powershell and vscode.\nTo connect to a remote computer you go to the terminal and type the simple command\nssh username@server.addresss\nAs an example suppose I have an account amarnane on myserver.inf.ed.ac.uk. To connect to myserver I type\nssh amarnane@myserver.ed.ac.uk\nYou will then receive a prompt to enter my password and are connected.\n\n\nFirst check what keys/files exist in your .ssh folder\nls ~/.ssh\nssh keys will look something like\nid_ed25519          id_ed25519.pub         id_rsa      id_rsa.pub\nThey are public/private pairs. Never share your private key. The public key is shared with remote systems (myserver or github) so they can check it matches the private key when you connect.\nIf no keys are present you will need to generate keys. The names rsa/ed25519 are names of algorithms for generate keys. rsa was the most common but is now quite old. ed25519 is more secure and recommended. If you do use rsa, it is recommended to create one with higher bits. The commands you will commonly see are\nssh-keygen -t rsa -b 4096\nssh-keygen -t ed25519\n-b here specifies the size of the key in bits. Pick one and now an id_rsa or id_ed25519 private&public pair will be present in your .ssh folder. A nice explanation of the algorithms and keys in general can be found here.\nWe now want to add our public key to the authorized keys in the remote server. First we need to copy the public key to the server\nscp ~/.ssh/id_ed25519.pub username@server.address:~/\n(we could use rsync here as shown above. scp works similarly.)\nWe then need to connect to the server\nssh username@server.address\nWe are now on the remote server. First check id_ed25519.pub was copied successfully,\nls ~/\nNow check if our authorized_keys file exists\nls ~/.ssh\nIf it doesn’t exist we need to create it\ntouch ~/.ssh/authorized_keys\ntouch is a helpful command that creates an empty text file. The authorized_keys file is simply a list of public keys. We you connect using ssh it checks if your key private key against the public keys stored in the authorized key list, if its a match you can connect.\nNow we want to add our public key to the authorized key list\ncat ~/id_ed25519.pub &gt;&gt; ~/.ssh/authorized_keys\ncat displays the contents of a file (in this case our public key) and &gt;&gt; pipes it into a file. So instead of seeing the output of the file in terminal, it is placed in the authorized_keys file. Note: &gt;&gt; appends to the end of the file. We could also use &gt; but this writes to file and would overwrite the content in authorized_keys.\n\n\n\n\nGuide to add ssh key to your github account (passwordless git commit, push, pull etc)\nMore in depth guide to add ssh key to authorized keys to allow passwordless ssh connections\n\n\n\n\n\nI discovered the ssh config through vscode (it is how it handles remote connections) but it is incredibly useful. It is particularly useful for complex ssh commands that involve a number of options like portforwarding or use a proxy to connect to a server. It really slims down how much you have to type and how many usernames server address etc you have to remember. The format is very simple. You write out the options for your connections and give it a name.\nSo instead of\nssh username@server.address\nYou can type\nssh myserver \nBy adding\nHost myserver\n    HostName server.address\n    User username\nto the ssh config file.\n\n\nFirst check the config file exists, your config should be located at ~/.ssh/config\nls ~/.ssh\nIf not create it using touch\ntouch ~/.ssh/config\nThe config file is simply a text file that has a specific format\nHost hostname1\n    SSH_OPTION value\n    SSH_OPTION value\n\nHost hostname2\n    SSH_OPTION value\n\n\n\nHere is an example of my setup to allow me to connect to myserver.inf.ed.ac.uk\nHost myserver\n    HostName myserver.inf.ed.ac.uk\n    User amarnane\n    ServerAliveInterval 30\nNote: I have made ServerAliveInterval smaller than default to try reduce the number of disconnects that happen while I work.\nSo now if I want to connect via ssh or copy files from my computer to the server I can just use myserver. For example moving public key to the server\nscp ~/.ssh/id_ed25519.pub myserver:~/\n\n\n\n\n\nSome more in depth guides for the config are here(I find this one easier to follow) and here\nList of all possible options to add to the config"
  },
  {
    "objectID": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#vscode",
    "href": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#vscode",
    "title": "Remote working with ssh & VSCode",
    "section": "",
    "text": "The main tool I use to work remotely is vscode. VSCode is an IDE developed by microsoft. It is lightweight, there are a lot of extensions that make coding nice and it has a great setup for remote work. I believe Pycharm has a similar setup and as students we can get a licence but honestly my main problem is it takes ages to open up and I am a true believer in making things as smooth as possible to start work (otherwise procrasination can take over).\n\n\nRunning vscode on a remote computer or server is very simple. There are 3 steps\n\ninstall remote server extension\nadd server details to .ssh/config. The simplest way is to\n\nctrl+shift+p Remote-SSH: Add New SSH Host\ntype ssh connection e.g. ssh username@server.address\nAn entry has now been made to your ssh config (will explain below)\n\nConnect to server using ctrl+shift+p Remote-SSH: Connect to Host\n\nAfter that you just open a folder/file and can code away with all code running remotely."
  },
  {
    "objectID": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#ssh-connections",
    "href": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#ssh-connections",
    "title": "Remote working with ssh & VSCode",
    "section": "",
    "text": "ssh or Secure shell is a protocol used to access remote computers over a network. The link will describe it better than I can but the main thing to know is that it is a way to access other computers in a safe way. It is very secure and as a phd student the main thing to know is you can use it work remotely, create passwordless connections and passwordless git repos. If you ever want to use a cluster or connect to a remote server, ssh is the way to do it. On linux the connections are done through the terminal (or vscode as I described above). On windows, it used to be a bit trickier but you can now access it through powershell and vscode.\nTo connect to a remote computer you go to the terminal and type the simple command\nssh username@server.addresss\nAs an example suppose I have an account amarnane on myserver.inf.ed.ac.uk. To connect to myserver I type\nssh amarnane@myserver.ed.ac.uk\nYou will then receive a prompt to enter my password and are connected.\n\n\nFirst check what keys/files exist in your .ssh folder\nls ~/.ssh\nssh keys will look something like\nid_ed25519          id_ed25519.pub         id_rsa      id_rsa.pub\nThey are public/private pairs. Never share your private key. The public key is shared with remote systems (myserver or github) so they can check it matches the private key when you connect.\nIf no keys are present you will need to generate keys. The names rsa/ed25519 are names of algorithms for generate keys. rsa was the most common but is now quite old. ed25519 is more secure and recommended. If you do use rsa, it is recommended to create one with higher bits. The commands you will commonly see are\nssh-keygen -t rsa -b 4096\nssh-keygen -t ed25519\n-b here specifies the size of the key in bits. Pick one and now an id_rsa or id_ed25519 private&public pair will be present in your .ssh folder. A nice explanation of the algorithms and keys in general can be found here.\nWe now want to add our public key to the authorized keys in the remote server. First we need to copy the public key to the server\nscp ~/.ssh/id_ed25519.pub username@server.address:~/\n(we could use rsync here as shown above. scp works similarly.)\nWe then need to connect to the server\nssh username@server.address\nWe are now on the remote server. First check id_ed25519.pub was copied successfully,\nls ~/\nNow check if our authorized_keys file exists\nls ~/.ssh\nIf it doesn’t exist we need to create it\ntouch ~/.ssh/authorized_keys\ntouch is a helpful command that creates an empty text file. The authorized_keys file is simply a list of public keys. We you connect using ssh it checks if your key private key against the public keys stored in the authorized key list, if its a match you can connect.\nNow we want to add our public key to the authorized key list\ncat ~/id_ed25519.pub &gt;&gt; ~/.ssh/authorized_keys\ncat displays the contents of a file (in this case our public key) and &gt;&gt; pipes it into a file. So instead of seeing the output of the file in terminal, it is placed in the authorized_keys file. Note: &gt;&gt; appends to the end of the file. We could also use &gt; but this writes to file and would overwrite the content in authorized_keys.\n\n\n\n\nGuide to add ssh key to your github account (passwordless git commit, push, pull etc)\nMore in depth guide to add ssh key to authorized keys to allow passwordless ssh connections"
  },
  {
    "objectID": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#ssh-config",
    "href": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#ssh-config",
    "title": "Remote working with ssh & VSCode",
    "section": "",
    "text": "I discovered the ssh config through vscode (it is how it handles remote connections) but it is incredibly useful. It is particularly useful for complex ssh commands that involve a number of options like portforwarding or use a proxy to connect to a server. It really slims down how much you have to type and how many usernames server address etc you have to remember. The format is very simple. You write out the options for your connections and give it a name.\nSo instead of\nssh username@server.address\nYou can type\nssh myserver \nBy adding\nHost myserver\n    HostName server.address\n    User username\nto the ssh config file.\n\n\nFirst check the config file exists, your config should be located at ~/.ssh/config\nls ~/.ssh\nIf not create it using touch\ntouch ~/.ssh/config\nThe config file is simply a text file that has a specific format\nHost hostname1\n    SSH_OPTION value\n    SSH_OPTION value\n\nHost hostname2\n    SSH_OPTION value\n\n\n\nHere is an example of my setup to allow me to connect to myserver.inf.ed.ac.uk\nHost myserver\n    HostName myserver.inf.ed.ac.uk\n    User amarnane\n    ServerAliveInterval 30\nNote: I have made ServerAliveInterval smaller than default to try reduce the number of disconnects that happen while I work.\nSo now if I want to connect via ssh or copy files from my computer to the server I can just use myserver. For example moving public key to the server\nscp ~/.ssh/id_ed25519.pub myserver:~/\n\n\n\n\n\nSome more in depth guides for the config are here(I find this one easier to follow) and here\nList of all possible options to add to the config"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2023\n\n\nAidan Marnane, Harlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 23, 2023\n\n\nAidan Marnane, Tristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nNohup & Tmux - Background Terminal Processes\n\n\nThere is nothing worse than interrupting an experiment that has been running for 3 days by closing a terminal window or losing internet connection. Here is how to fix that.\n\n\n\n\ntmux\n\n\nnohup\n\n\nremote working\n\n\nbash\n\n\nlinux\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nAidan Marnane, Aidan Marnane\n\n\n\n\n\n\n  \n\n\n\n\nRemote working with ssh & VSCode\n\n\nRunning code remotely is great but can be intimidating to setup. You often get told things like “just use ssh, portforward and you are good to go” as if it is the easiest thing in the world. Hopefully this tutorial helps make it as easy as everyone says it is!\n\n\n\n\nremote working\n\n\nssh\n\n\nbash\n\n\nvscode\n\n\nlinux\n\n\n\n\n\n\n\n\n\n\n\nMar 17, 2023\n\n\nAidan Marnane\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#tips-for-remote-work",
    "href": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#tips-for-remote-work",
    "title": "Remote working with ssh & VSCode",
    "section": "",
    "text": "Some tips I find helpful.\n\nBackup code: write code in github repos and commit regularly! It is so important to have a backup. If something goes wrong the code is gone forever! Plus if you don’t like changes you make you can revert to code you wrote 3 months ago.\nPasswordless ssh connections: Add your public key from your local computer to the accepted keys on the server. You won’t have to to type passwords again and again. Do same thing for git, add public key to accepted keys on github. 2\nCreate source code: I like doing analysis in jupyter notebooks but I often find they get cluttered, messy and it is tedious to look back through notebooks and access functions or scripts that I wrote. Good practice is to move functions/classes you use regularly to .py as source code and create scripts that accept command line arguments for specific analysis/tasks you will want to do regularly. 3\nMove data: Use rsync to move data from your computer to the server and vice versa.\n\nrsync -azP source destination\n\n-z flag compresses the data as it is copied so is very efficient.\n-a flag,which stands for archive, syncs recursively and allows to transfer folders. Is similar to -r flag but keeps permissions, timestamps, ownership and other things (more likely to stop things breaking).\n-P gives progress bar and resumes interrupted transfers.\n\nThe format is: rsync -azP local_path_2_folder username@server.address:path_on_remote_server e.g. rsync -azP ~/dir1 amarnane@myserver.inf.ed.ac.uk:~/docs/ (flip order to move from remote to local)\nThere are many more options that I haven’t explored yet but this a nice tutorial\n\nYou will not remember this [code/analysis/function]: Some general PhD advice but make sure to write out explanations in notebooks, comment regularly in your code and try to datestamp or include copy of the code used to generate any figures or models or data that you publish/use in a presentation/report. At some point you will drop what you are currently working on and will come back to it after a couple of months/years. You will not remember what exactly it was you did. Make it easier for yourself! 4\nNext step/Advanced/I have not done this:\n\nUse docker instances so that you can easily share your environment/model and have it run right away. It allows you to save a copy of your setup so people can just run your code e.g. run a model developed on linux in a windows machine.\nUse a workflow system like snakemake or nextflow to combine scripts and make and end to end pipline for your project. If you have multiple steps like preprocess data -&gt; create data stucture -&gt; train model -&gt; analyse output you can combine them easily using a workflow system and pass the output from one section to the other easily. It is more modular and adaptable than writing an end to end script (if your code is python only) and allows you to pass output from one language to a script using different software e.g. python train model, R analyse and plot. Can also add checkpoints to start the pipeline from any intermediate step e.g. change model and skip rerunning preprocessing."
  },
  {
    "objectID": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#footnotes",
    "href": "posts/working-on-remote-server/2023-03-17-working-on-a-remote-server.html#footnotes",
    "title": "Remote working with ssh & VSCode",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nPhoto from Dean Pugh on Unsplash↩︎\nlinks to guides down below↩︎\nagain a small guide down below↩︎\nI have some code for appending dates to filenames and backing up source code if you want it just send me a message or I can include them in this document?↩︎"
  }
]